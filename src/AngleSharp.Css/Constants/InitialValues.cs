namespace AngleSharp.Css.Constants
{
    using AngleSharp.Css.Dom;
    using AngleSharp.Css.Values;
    using AngleSharp.Dom;
    using System;

    static class InitialValues
    {
        public static readonly ICssValue ColorDeclaration = Color.Black;
        public static readonly ICssValue BackgroundColorDeclaration = Color.Transparent;
        public static readonly ICssValue BackgroundImageDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue BackgroundRepeatDeclaration = new ImageRepeats(new Identifier(CssKeywords.Repeat), new Identifier(CssKeywords.Repeat));
        public static readonly ICssValue BackgroundPositionDeclaration = new CssTupleValue(new ICssValue[] { new Length(0, Length.Unit.Percent), new Length(0, Length.Unit.Percent) });
        public static readonly ICssValue BackgroundSizeDeclaration = new BackgroundSize(new Constant<Length>(CssKeywords.Auto, Length.Auto), new Constant<Length>(CssKeywords.Auto, Length.Auto));
        public static readonly ICssValue BackgroundOriginDeclaration = new Constant<BoxModel>(CssKeywords.BorderBox, BoxModel.PaddingBox);
        public static readonly ICssValue BackgroundClipDeclaration = new Constant<BoxModel>(CssKeywords.BorderBox, BoxModel.BorderBox);
        public static readonly ICssValue BackgroundAttachmentDeclaration = new Constant<BackgroundAttachment>(CssKeywords.Scroll, BackgroundAttachment.Scroll);
        public static readonly ICssValue FontStyleDeclaration = new Constant<FontStyle>(CssKeywords.Normal, FontStyle.Normal);
        public static readonly ICssValue FontVariantDeclaration = new Constant<FontVariant>(CssKeywords.Normal, FontVariant.Normal);
        public static readonly ICssValue FontWeightDeclaration = new Constant<FontWeight>(CssKeywords.Normal, FontWeight.Normal);
        public static readonly ICssValue FontStretchDeclaration = new Constant<FontStretch>(CssKeywords.Normal, FontStretch.Normal);
        public static readonly ICssValue FontSizeDeclaration = new Constant<Length>(CssKeywords.Medium, Length.Medium);
        public static readonly ICssValue FontFamilyDeclaration = new StringValue("Times New Roman");
        public static readonly ICssValue LineHeightDeclaration = new Constant<Length>(CssKeywords.Normal, Length.Normal);
        public static readonly ICssValue BorderTopWidthDeclaration = new Constant<Length>(CssKeywords.Medium, Length.Medium);
        public static readonly ICssValue BorderRightWidthDeclaration = new Constant<Length>(CssKeywords.Medium, Length.Medium);
        public static readonly ICssValue BorderBottomWidthDeclaration = new Constant<Length>(CssKeywords.Medium, Length.Medium);
        public static readonly ICssValue BorderLeftWidthDeclaration = new Constant<Length>(CssKeywords.Medium, Length.Medium);
        public static readonly ICssValue BorderTopStyleDeclaration = new Constant<LineStyle>(CssKeywords.None, LineStyle.None);
        public static readonly ICssValue BorderRightStyleDeclaration = new Constant<LineStyle>(CssKeywords.None, LineStyle.None);
        public static readonly ICssValue BorderBottomStyleDeclaration = new Constant<LineStyle>(CssKeywords.None, LineStyle.None);
        public static readonly ICssValue BorderLeftStyleDeclaration = new Constant<LineStyle>(CssKeywords.None, LineStyle.None);
        public static readonly ICssValue BorderTopColorDeclaration = new Constant<Color>(CssKeywords.CurrentColor, Color.CurrentColor);
        public static readonly ICssValue BorderRightColorDeclaration = new Constant<Color>(CssKeywords.CurrentColor, Color.CurrentColor);
        public static readonly ICssValue BorderBottomColorDeclaration = new Constant<Color>(CssKeywords.CurrentColor, Color.CurrentColor);
        public static readonly ICssValue BorderLeftColorDeclaration = new Constant<Color>(CssKeywords.CurrentColor, Color.CurrentColor);
        public static readonly ICssValue ColumnWidthDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue ColumnCountDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue ColumnRuleWidthDeclaration = new Constant<Length>(CssKeywords.Medium, Length.Medium);
        public static readonly ICssValue ColumnRuleStyleDeclaration = new Constant<LineStyle>(CssKeywords.None, LineStyle.None);
        public static readonly ICssValue ColumnRuleColorDeclaration = new Constant<Color>(CssKeywords.CurrentColor, Color.CurrentColor);
        public static readonly ICssValue AnimationNameDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue AnimationDurationDeclaration = Time.Zero;
        public static readonly ICssValue AnimationTimingFunctionDeclaration = CubicBezierTimingFunction.Ease;
        public static readonly ICssValue AnimationDelayDeclaration = Time.Zero;
        public static readonly ICssValue AnimationIterationCountDeclaration = new Length(1, Length.Unit.None);
        public static readonly ICssValue AnimationDirectionDeclaration = new Constant<AnimationDirection>(CssKeywords.Normal, AnimationDirection.Normal);
        public static readonly ICssValue AnimationFillModeDeclaration = new Constant<AnimationFillStyle>(CssKeywords.None, AnimationFillStyle.None);
        public static readonly ICssValue AnimationPlayStateDeclaration = new Constant<PlayState>(CssKeywords.Running, PlayState.Running);
        public static readonly ICssValue TransitionDelayDeclaration = Time.Zero;
        public static readonly ICssValue TransitionDurationDeclaration = Time.Zero;
        public static readonly ICssValue TransitionPropertyDeclaration = new Identifier(CssKeywords.All);
        public static readonly ICssValue TransitionTimingFunctionDeclaration = CubicBezierTimingFunction.Ease;
        public static readonly ICssValue DirectionDeclaration = new Constant<DirectionMode>(CssKeywords.Ltr, DirectionMode.Ltr);
        public static readonly ICssValue EmptyCellsDeclaration = new Constant<Boolean>(CssKeywords.Show, true);
        public static readonly ICssValue FlexGrowDeclaration = new Length(0, Length.Unit.None);
        public static readonly ICssValue FlexShrinkDeclaration = new Length(1, Length.Unit.None);
        public static readonly ICssValue FlexBasisDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue FloatDeclaration = new Constant<Floating>(CssKeywords.None, Floating.None);
        public static readonly ICssValue BorderSpacingDeclaration = Length.Zero;
        public static readonly ICssValue BoxShadowDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue BoxSizingDeclaration = new Constant<BoxModel>(CssKeywords.ContentBox, BoxModel.ContentBox);
        public static readonly ICssValue BreakAfterDeclaration = new Constant<BreakMode>(CssKeywords.Auto, BreakMode.Auto);
        public static readonly ICssValue BreakBeforeDeclaration = new Constant<BreakMode>(CssKeywords.Auto, BreakMode.Auto);
        public static readonly ICssValue BreakInsideDeclaration = new Constant<BreakMode>(CssKeywords.Auto, BreakMode.Auto);
        public static readonly ICssValue PageBreakInsideDeclaration = new Constant<BreakMode>(CssKeywords.Auto, BreakMode.Auto);
        public static readonly ICssValue PageBreakBeforeDeclaration = new Constant<BreakMode>(CssKeywords.Auto, BreakMode.Auto);
        public static readonly ICssValue PageBreakAfterDeclaration = new Constant<BreakMode>(CssKeywords.Auto, BreakMode.Auto);
        public static readonly ICssValue BottomDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue TopDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue LeftDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue RightDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue MinHeightDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue MinWidthDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue MaxHeightDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue MaxWidthDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue MarginLeftDeclaration = Length.Zero;
        public static readonly ICssValue MarginBottomDeclaration = Length.Zero;
        public static readonly ICssValue MarginRightDeclaration = Length.Zero;
        public static readonly ICssValue MarginTopDeclaration = Length.Zero;
        public static readonly ICssValue PaddingLeftDeclaration = Length.Zero;
        public static readonly ICssValue PaddingBottomDeclaration = Length.Zero;
        public static readonly ICssValue PaddingRightDeclaration = Length.Zero;
        public static readonly ICssValue PaddingTopDeclaration = Length.Zero;
        public static readonly ICssValue CaptionSideDeclaration = new Constant<Boolean>(CssKeywords.Top, true);
        public static readonly ICssValue CursorDeclaration = new Constant<SystemCursor>(CssKeywords.Auto, SystemCursor.Auto);
        public static readonly ICssValue OverflowWrapDeclaration = new Constant<OverflowWrap>(CssKeywords.Normal, OverflowWrap.Normal);
        public static readonly ICssValue WordSpacingDeclaration = new Constant<Length>(CssKeywords.Normal, Length.Normal);
        public static readonly ICssValue WordBreakDeclaration = new Constant<WordBreak>(CssKeywords.Normal, WordBreak.Normal);
        public static readonly ICssValue VisibilityDeclaration = new Constant<Visibility>(CssKeywords.Visible, Visibility.Visible);
        public static readonly ICssValue VerticalAlignDeclaration = new Constant<VerticalAlignment>(CssKeywords.Baseline, VerticalAlignment.Baseline);
        public static readonly ICssValue OpacityDeclaration = new Length(1.0, Length.Unit.None);
        public static readonly ICssValue OverflowDeclaration = new Constant<OverflowMode>(CssKeywords.Visible, OverflowMode.Visible);
        public static readonly ICssValue OutlineWidthDeclaration = new Constant<Length>(CssKeywords.Medium, Length.Medium);
        public static readonly ICssValue OutlineStyleDeclaration = new Constant<LineStyle>(CssKeywords.None, LineStyle.None);
        public static readonly ICssValue OutlineColorDeclaration = new Constant<Color>(CssKeywords.Invert, Color.InvertedColor);
        public static readonly ICssValue TextTransformDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue TextShadowDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue TextRenderingDeclaration = new Constant<Object>(CssKeywords.Auto, null);
        public static readonly ICssValue TextOverflowDeclaration = new Constant<OverflowMode>(CssKeywords.Auto, OverflowMode.Clip);
        public static readonly ICssValue TextOrientationDeclaration = new Constant<Object>(CssKeywords.Mixed, null);
        public static readonly ICssValue TextJustifyDeclaration = new Constant<TextJustify>(CssKeywords.Auto, TextJustify.Auto);
        public static readonly ICssValue TextIndentDeclaration = Length.Zero;
        public static readonly ICssValue TextAlignDeclaration = new Constant<HorizontalAlignment>(CssKeywords.Left, HorizontalAlignment.Left);
        public static readonly ICssValue TextAlignLastDeclaration = new Constant<TextAlignLast>(CssKeywords.Auto, TextAlignLast.Auto);
        public static readonly ICssValue TextDecorationLineDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue TextDecorationStyleDeclaration = new Constant<LineStyle>(CssKeywords.Solid, LineStyle.Solid);
        public static readonly ICssValue TextDecorationColorDeclaration = new Constant<Color>(CssKeywords.CurrentColor, Color.CurrentColor);
        public static readonly ICssValue ListStyleTypeDeclaration = new Constant<ListStyle>(CssKeywords.Disc, ListStyle.Disc);
        public static readonly ICssValue ListStylePositionDeclaration = new Constant<ListPosition>(CssKeywords.Outside, ListPosition.Outside);
        public static readonly ICssValue ListStyleImageDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue LineBreakDeclaration = new Constant<BreakMode>(CssKeywords.Auto, BreakMode.Auto);
        public static readonly ICssValue GridTemplateRowsDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue GridTemplateColumnsDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue GridTemplateAreasDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue GridAutoRowsDeclaration = new Constant<Object>(CssKeywords.Auto, null);
        public static readonly ICssValue GridAutoColumnsDeclaration = new Constant<Object>(CssKeywords.Auto, null);
        public static readonly ICssValue GridAutoFlowDeclaration = new Constant<Boolean>(CssKeywords.Row, false);
        public static readonly ICssValue GridColumnGapDeclaration = Length.Zero;
        public static readonly ICssValue GridRowGapDeclaration = Length.Zero;
        public static readonly ICssValue ColumnGapDeclaration = new Constant<Length>(CssKeywords.Normal, Length.Normal);
        public static readonly ICssValue RowGapDeclaration = new Constant<Length>(CssKeywords.Normal, Length.Normal);
        public static readonly ICssValue PerspectiveDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue PositionDeclaration = new Constant<PositionMode>(CssKeywords.Inline, PositionMode.Static);
        public static readonly ICssValue TransformDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue ClearModeDeclaration = new Constant<ClearMode>(CssKeywords.None, ClearMode.None);
        public static readonly ICssValue ClipDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
        public static readonly ICssValue ContentDeclaration = new Constant<Object>(CssKeywords.Normal, null);
        public static readonly ICssValue CounterIncrementDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue CounterResetDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue DisplayDeclaration = new Constant<DisplayMode>(CssKeywords.Inline, DisplayMode.Inline);
        public static readonly ICssValue BackfaceVisibilityDeclaration = new Constant<Visibility>(CssKeywords.Visible, Visibility.Visible);
        public static readonly ICssValue BorderImageSourceDeclaration = new Constant<Object>(CssKeywords.None, null);
        public static readonly ICssValue BorderImageSliceDeclaration = Length.Full;
        public static readonly ICssValue BorderImageWidthDeclaration = new Length(1, Length.Unit.None);
        public static readonly ICssValue BorderImageOutsetDeclaration = Length.Zero;
        public static readonly ICssValue BorderImageRepeatDeclaration = new Constant<BorderRepeat>(CssKeywords.Stretch, BorderRepeat.Stretch);
        public static readonly ICssValue AlignSelfDeclaration = new Constant<FlexContentMode>(CssKeywords.Auto, FlexContentMode.Auto);
        public static readonly ICssValue AlignItemsDeclaration = new Constant<Object>(CssKeywords.Normal, null);
        public static readonly ICssValue AlignContentDeclaration = new Constant<Object>(CssKeywords.Normal, null);
        public static readonly ICssValue JustifyContentDeclaration = new Constant<Object>(CssKeywords.Normal, null);
        public static readonly ICssValue JustifyItemsDeclaration = new Constant<Object>(CssKeywords.Legacy, null);
        public static readonly ICssValue JustifySelfDeclaration = new Constant<FlexContentMode>(CssKeywords.Auto, FlexContentMode.Auto);
        public static readonly ICssValue ZIndexDeclaration = new Constant<Length>(CssKeywords.Auto, Length.Auto);
    }
}
